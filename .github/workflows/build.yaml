---

name: Build and Release
on:
  workflow_dispatch:
  push:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # TODO: Add support for more platforms
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: current_version
        run: |
          docker pull -a ghcr.io/${{ github.repository }} || true && \
          echo "digest=$(docker history -q ghcr.io/${{ github.repository }}:latest | head -n 1)" >>$GITHUB_OUTPUT

      - name: Current release version
        id: current_release_version
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest
        run: |
          export TAG=$(docker inspect ghcr.io/${{ github.repository }}:latest --format '{{ range .RepoTags }}{{ $tag := index (split . ":") 1 }}{{ if ne $tag "latest" }}{{ $tag }}{{ end }}{{ end }}' | sort | tail -n 1) && \
          echo "version=$(echo ${TAG} | cut -d'-' -f1)" >>$GITHUB_OUTPUT && \
          echo "build=$(echo ${TAG} | cut -d'-' -f2)" >>$GITHUB_OUTPUT

      - name: Docker Build
        uses: docker/build-push-action@v4
        with:
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
          load: true
          pull: true
          tags: ghcr.io/${{ github.repository }}:latest

      - name: Get new version digest
        id: new_version
        run: echo "digest=$(docker history -q ghcr.io/${{ github.repository }}:latest | head -n 1)" >>$GITHUB_OUTPUT

      - name: Get Borg version
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest
        id: borg_version
        run: echo "version=$(docker run --rm --entrypoint borg ghcr.io/${{ github.repository }}:latest -V | cut -d' ' -f2)" >>$GITHUB_OUTPUT

      - name: Bump the build version
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest && steps.current_release_version.outputs.version == steps.borg_version.outputs.version
        run: echo "RELEASE_VERSION=${{ steps.borg_version.outputs.version }}-$(echo ${{ steps.current_release_version.outputs.build }} | awk '{print $1+1}')" >>$GITHUB_ENV

      - name: Calculate new release version
        id: new_release_version
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest && steps.current_release_version.outputs.version != steps.borg_version.outputs.version
        run: echo "RELEASE_VERSION=${{ steps.borg_version.outputs.version }}-0" >>$GITHUB_ENV

      - if: steps.current_version.outputs.digest != steps.new_version.outputs.digest
        run: |
          echo "Old Docker Container Digest: ${{ steps.current_version.outputs.digest }}
          New Docker Container Digest: ${{ steps.new_version.outputs.digest }}
          Borg Version: ${{ steps.borg_version.outputs.version }}
          Old Release: ${{ join(steps.current_release_version.outputs.*, ', ') }}
          Release Version: ${{ env.RELEASE_VERSION }}"

      - name: Docker Push
        if: success() && steps.current_version.outputs.digest != steps.new_version.outputs.digest
        uses: docker/build-push-action@v4
        with:
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64,linux/ppc64le
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ env.RELEASE_VERSION }}

      - name: Update Chart.yaml
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest
        run: envsubst < chart/borgserver/Chart.yaml > chart/borgserver/Chart.yaml.out && mv chart/borgserver/Chart.yaml.out chart/borgserver/Chart.yaml && cat chart/borgserver/Chart.yaml && ls -la
        env:
          BORG_VERSION: ${{ steps.borg_version.outputs.version }}
          CHART_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Install Helm
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest
        uses: azure/setup-helm@v3

      - name: Configure Git
        if: steps.current_version.outputs.digest != steps.new_version.outputs.digest
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        if: success() && steps.current_version.outputs.digest != steps.new_version.outputs.digest
        uses: helm/chart-releaser-action@v1.5.0
        with:
          charts_dir: chart
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_RELEASE_NAME_TEMPLATE: "{{ .Version }}"
